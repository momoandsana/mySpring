name: Build and Deploy Docker Image to EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # 1. GitHub Actions가 저장소 체크아웃
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. Java 17 설치 (temurin 사용)
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # 3. Maven 빌드 (pom.xml 파일이 프로젝트 루트에 있음)
    - name: Build JAR with Maven
      run: |
        mvn clean package -DskipTests

    # 4. Docker Hub 로그인
    - name: Login to Docker Hub
      env:
        DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
      run: |
        echo "${DOCKER_HUB_TOKEN}" | docker login -u "${DOCKER_HUB_USERNAME}" --password-stdin

    # 5. Docker 이미지 빌드 및 푸시
    - name: Build and Push Docker Image
      env:
        DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      run: |
        docker build -t ${DOCKER_HUB_USERNAME}/gil-project:latest .
        docker push ${DOCKER_HUB_USERNAME}/gil-project:latest

    # 6. EC2에서 Docker Compose 실행
    - name: Deploy on EC2
      env:
        PEM_KEY: ${{ secrets.EC2_PEM_KEY }}
        EC2_HOST: ${{ secrets.EC2_HOST }}
        USER: ${{ secrets.EC2_USER }}
        DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
      run: |
        set -e
        trap 'rm -f key.pem' EXIT

        # PEM 키를 임시 파일로 저장
        echo "$PEM_KEY" > key.pem
        chmod 600 key.pem

        # SSH로 Docker 작업 수행
        ssh -i key.pem -o StrictHostKeyChecking=no ${USER}@${EC2_HOST} << EOF
          set -e
          cd /home/${USER}

          # Docker Hub 로그인
          echo "${DOCKER_HUB_TOKEN}" | docker login -u "${DOCKER_HUB_USERNAME}" --password-stdin

          # 기존 컨테이너 종료
          docker-compose down || true

          # 이전 Docker 이미지 삭제
          docker images --filter=reference='${DOCKER_HUB_USERNAME}/gil-project*' --format "{{.ID}}" | xargs -r docker rmi -f || true

          # 최신 Docker 이미지 Pull
          docker-compose pull

          # Docker Compose 실행
          docker-compose up -d --force-recreate
        EOF
